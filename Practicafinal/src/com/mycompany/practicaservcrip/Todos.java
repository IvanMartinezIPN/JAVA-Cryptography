/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.practicaservcrip;

import static com.mycompany.practicaservcrip.CifrarDescifrar.getTxt;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Font;


public class Todos extends javax.swing.JFrame {

    /**
     * Creates new form Todos
     */
    public Todos() {
    	getContentPane().setBackground(new Color(0, 153, 255));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Cifrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Descifrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new Font("French Script MT", Font.BOLD | Font.ITALIC, 20)); // NOI18N
        jLabel4.setText("Descifrar-Verificar");

        jLabel5.setFont(new Font("French Script MT", Font.BOLD | Font.ITALIC, 20)); // NOI18N
        jLabel5.setText("Cifrar-Firmar");

        jButton3.setText("Regresar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Llave privada remitente");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Llave publica destinatario");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Llave publica remitente");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Llave privada destinatario");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(4)
        					.addComponent(jLabel6))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(52)
        					.addComponent(jLabel5)))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(109)
        					.addComponent(jLabel9))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(130)
        					.addComponent(jLabel4)))
        			.addGap(880))
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        					.addGroup(layout.createSequentialGroup()
        						.addContainerGap()
        						.addComponent(jLabel7)
        						.addGap(32))
        					.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        						.addContainerGap()
        						.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        							.addComponent(jTextField5, Alignment.LEADING)
        							.addComponent(jTextField4, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))
        						.addPreferredGap(ComponentPlacement.RELATED, 9, Short.MAX_VALUE)))
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jButton1)
        					.addGap(96)))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(85)
        					.addComponent(jLabel8))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(27)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(jTextField6)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jButton3)
        							.addGap(67)
        							.addComponent(jButton2))
        						.addComponent(jTextField7, GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))))
        			.addGap(843))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel4)
        				.addComponent(jLabel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel6)
        				.addComponent(jLabel9))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTextField4, GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
        				.addComponent(jTextField7, GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
        			.addGap(10)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel7)
        				.addComponent(jLabel8))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(jTextField6)
        				.addComponent(jTextField5, GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton1)
        				.addComponent(jButton3)
        				.addComponent(jButton2))
        			.addGap(30))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Main m = new Main();
        m.setVisible(true);
        dispose();

    }//GEN-LAST:event_jButton3ActionPerformed

    private String obtenerFirma(String llavePrivadaBase64, String txt) {
        KeyFactory kf = null;
        try {
            kf = KeyFactory.getInstance("RSA");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Base64.Encoder encoder = Base64.getEncoder();
        Base64.Decoder decoder = Base64.getDecoder();
        PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(decoder.decode(llavePrivadaBase64));
        PrivateKey pvt = null;
        try {
            pvt = kf.generatePrivate(ks);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Hash h1 = new Hash();
        String hash = h1.getHash(txt);

        System.out.println("Mandamos");
        System.out.println("Texto: " + txt);
        System.out.println("Texto size: " + txt.length());
        System.out.println("Hash: " + hash);
        //System.out.println("Hash: " +hash);
        Cipher rsa = null;
        try {
            rsa = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            rsa.init(Cipher.ENCRYPT_MODE, pvt);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] hashCifradoBytes = null;
        try {
            hashCifradoBytes = rsa.doFinal(hash.getBytes());
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        String hashCifrado = encoder.encodeToString(hashCifradoBytes);
        return hashCifrado;
    }

    public String getName(String name) {
        String res = "";
        for (int i = 0; i < name.length(); i++) {
            if (name.charAt(i) == '.') {
                break;
            }
            res += name.charAt(i);
        }
        return res;
    }

    void create(String path, String name, String txt) {
        name = getName(name);
        name += "_generado.txt";
        path += "\\" + name;
        System.out.println(path);
        try {
            FileWriter myWriter = new FileWriter(path);
            myWriter.write(txt);
            myWriter.close();
            JOptionPane.showMessageDialog(null, "Archivo creado en: " + path);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static String getTxt(String file, int x) throws FileNotFoundException, IOException {
        BufferedReader br = new BufferedReader(new FileReader(file));
        String st;
        ArrayList<String> lista = new ArrayList<>();
        while ((st = br.readLine()) != null) {
            lista.add(st);
        }
        return lista.get(x);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String llaveAES = "Naruto Shippuden";
        String IV = "1234567890123456";
        String llavePrivadaRSA = jTextField4.getText();
        String llavePublicaRSA = jTextField5.getText();

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("choosertitle");
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String modoOperacion = "CBC";
            Files file = new Files();
            String txt = "";
            try {
                txt = file.getText(chooser.getSelectedFile().toString(), true);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            String HashFirma = obtenerFirma(llavePrivadaRSA, txt);
            
            AES ejecutor = new AES();
            ejecutor.IV = IV;
            ejecutor.key = llaveAES;
            ejecutor.path = chooser.getSelectedFile().toString();
            ejecutor.modoOperacion = modoOperacion;
            ejecutor.pathDest = chooser.getCurrentDirectory().toString();
            ejecutor.nameFile = chooser.getSelectedFile().getName();
            String textoCifradoAES = ejecutor.cifrar2(txt);

            RSA rsa = new RSA();
            String llaveAESCifrada = rsa.cifrar(llavePublicaRSA, llaveAES);

            String res = textoCifradoAES + "\n" + llaveAESCifrada + "\n" + HashFirma;
            create(chooser.getCurrentDirectory().toString(), chooser.getSelectedFile().getName(), res);

        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private static boolean checarFirma(String llavePublicaBase64, String HashCifradoStrBase64, String txt) {
        KeyFactory kf = null;
        try {
            kf = KeyFactory.getInstance("RSA");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Base64.Encoder encoder = Base64.getEncoder();
        Base64.Decoder decoder = Base64.getDecoder();
        X509EncodedKeySpec ks = new X509EncodedKeySpec(decoder.decode(llavePublicaBase64));
        Key pub = null;
        try {
            pub = kf.generatePublic(ks);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        Hash h1 = new Hash();
        Cipher rsa = null;
        try {
            rsa = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        Key privateKey;
        try {
            rsa.init(Cipher.DECRYPT_MODE, pub);
        } catch (InvalidKeyException ex) {
            JOptionPane.showMessageDialog(null, "Hash invalido(1)");
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] cifrado = null;
        try {
            cifrado = decoder.decode(HashCifradoStrBase64);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Hash invalido(2)");
        }

        byte[] bytesDesencriptados = null;
        try {
            bytesDesencriptados = rsa.doFinal(cifrado);
        } catch (IllegalBlockSizeException ex) {
            JOptionPane.showMessageDialog(null, "Hash invalido(3)");
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            JOptionPane.showMessageDialog(null, "Hash invalido(4)");
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        String textoDesencripado = new String(bytesDesencriptados);

        System.out.println("Recibimos:");
        System.out.println("Hash desencriptado: " + textoDesencripado);
        System.out.println("Texto recibido:" + txt);
        System.out.println("Texto size: " + txt.length());
        boolean iguales = h1.compare(txt, textoDesencripado);
        /*if (iguales == true) {
            JOptionPane.showMessageDialog(null, "Hash valido");
        } else {
            JOptionPane.showMessageDialog(null, "Hash invalido");
        }*/
        return iguales;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String IV = "1234567890123456";
        String llavePrivadaRSA = jTextField7.getText();
        String llavePublicaRSA = jTextField6.getText();
        String modoOperacion = "CBC";

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("choosertitle");
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            // Conseguir llave AES 
            String txt = "";
            try {
                txt = getTxt(chooser.getSelectedFile().toString(), 1);
            } catch (IOException ex) {
                Logger.getLogger(CifrarDescifrar.class.getName()).log(Level.SEVERE, null, ex);
            }
            RSA rsa = new RSA();
            String llavePrivadaAES = rsa.descifrar(llavePrivadaRSA, txt);

            AES ejecutor = new AES();
            ejecutor.IV = IV;
            ejecutor.key = llavePrivadaAES;
            ejecutor.path = chooser.getSelectedFile().toString();
            ejecutor.modoOperacion = modoOperacion;
            ejecutor.pathDest = chooser.getCurrentDirectory().toString();
            ejecutor.nameFile = chooser.getSelectedFile().getName();
            String textoDescifrado = "";
            try {
                textoDescifrado = ejecutor.decifrar2(getTxt(chooser.getSelectedFile().toString(), 0));
            } catch (IOException ex) {
                Logger.getLogger(CifrarDescifrar.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println(llavePrivadaAES);
            //System.out.println(textoDescifrado);

            boolean valido = false;
            try {
                valido = checarFirma(llavePublicaRSA, getTxt(chooser.getSelectedFile().toString(), 2), textoDescifrado);
            } catch (IOException ex) {
                Logger.getLogger(Todos.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (valido == true) {
                JOptionPane.showMessageDialog(null, "Firma valida");
                create(chooser.getCurrentDirectory().toString(), chooser.getSelectedFile().getName(), textoDescifrado);

            } else {
                JOptionPane.showMessageDialog(null, "Firma invalida");
                create(chooser.getCurrentDirectory().toString(), chooser.getSelectedFile().getName(), textoDescifrado);
            }

        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Todos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Todos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Todos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Todos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Todos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
